#!/usr/bin/env python

import contextlib
import glob
import json
import os
import re
import shutil
import sys
import tempfile
import time

import requests

import sh


def project_map():
    map_file = os.path.join(os.path.dirname(__file__), 'project-map.json')
    with open(map_file) as map:
        project_map = json.load(map)
    return project_map


@contextlib.contextmanager
def cd(dir):
    pwd = os.getcwd()
    try:
        os.chdir(dir)
        yield
    finally:
        os.chdir(pwd)


class GitlabChange:

    GITLAB = 'https://gitlab.suse.de'
    GITLAB_ARDANA_ORG = 'ArdanaDev'

    def __init__(self, project, mr_id, source, target):
        self.project = project
        self.mr_id = mr_id
        # FIXME: these details should be acquired automatically by interrogating
        # the gitlab API
        self.source = source
        self.target = target
        self.url = '%s/%s/%s.git' % (self.GITLAB,
                                     self.GITLAB_ARDANA_ORG,
                                     self.project)

    def prep_workspace(self):
        if not os.path.exists('./source'):
            os.mkdir('source')
        with cd('source'):
            if not os.path.exists('%s.git/.git' % self.project):
                print("Cloning project %s" % self.project)
                sh.git('clone', self.url, '%s.git' % self.project)
            with cd('%s.git' % self.project):
                # If another change is already checked out on this branch,
                # don't clobber it.
                try:
                    sh.git('checkout', 'test-merge')
                except sh.ErrorReturnCode_1:
                    sh.git('checkout', '-b', 'test-merge', self.target)
                print("Fetching source %s" % self.source)
                sh.git('fetch', 'origin', self.source)
                sh.git('merge', '--no-edit', 'FETCH_HEAD')


def test_project_name(gitlab_project, gitlab_mr_id, homeproject):
    return '%s:ardana-ci-%s-%s' % (homeproject, gitlab_project, gitlab_mr_id)


def create_test_project(develproject, testproject, repository):
    repo_metadata = """
<project name="%(testproject)s">
  <title>Autogenerated CI project</title>
  <description/>
  <link project="%(develproject)s"/>
  <person userid="opensuseapibmw" role="maintainer"/>
  <publish>
    <enable repository="standard"/>
  </publish>
  <repository name="standard" rebuild="direct" block="local"
      linkedbuild="localdep">
    <path project="%(develproject)s" repository="%(repository)s"/>
    <arch>x86_64</arch>
  </repository>
</project>
""" % {'testproject': testproject,
       'develproject': develproject,
       'repository': repository}

    with tempfile.NamedTemporaryFile() as meta:
        meta.write(repo_metadata)
        meta.flush()
        print("Creating test project %s linked to devel project %s" %
              (testproject, develproject))
        sh.osc('-A', 'https://api.suse.de', 'api', '-T', meta.name,
               '/source/%s/_meta' % testproject)

    return testproject


def wait_for_build():
    print("Waiting for build to be scheduled")
    while 'unknown' in sh.osc('results'):
        time.sleep(3)
    print("Waiting for build results")
    results = sh.osc('results', '--watch')
    if 'succeeded' not in results:
        print("Build results: %s" % results)
        print("Package build failed.")
        sys.exit(1)


def create_test_package(change, develproject, testproject):
    package_name = project_map()[change.project]
    print("Creating test package %s" % package_name)
    sh.osc('-A', 'https://api.suse.de', 'copypac', '--keep-link',
           develproject, package_name, testproject)
    sh.osc('-A', 'https://api.suse.de', 'checkout', testproject, package_name)
    source_dir = '%s/source/%s.git' % (os.getcwd(), change.project)
    with cd('%s/%s' % (testproject, package_name)):
        with open('_service', 'r+') as service_file:
            service_def = service_file.read()
            service_def = re.sub(r'<param name="url">.*</param>',
                                 '<param name="url">%s</param>' % source_dir,
                                 service_def)
            service_def = re.sub(r'<param name="revision">.*</param>',
                                 '<param name="revision">test-merge</param>',
                                 service_def)
            service_file.seek(0)
            service_file.write(service_def)
            service_file.truncate()
        sh.osc('rm', glob.glob('%s*.obscpio' % package_name))
        sh.osc('service', 'disabledrun')
        sh.osc('add', glob.glob('%s*.obscpio' % package_name))
        sh.osc('commit', '-m', 'Testing change %s/%s' % (change.project, change.mr_id))
        wait_for_build()


def cleanup(testproject):
    if os.path.exists('./source'):
        shutil.rmtree('./source')
    if os.path.exists('./%s' % testproject):
        shutil.rmtree('./%s' % testproject)


def main():
    gitlab_project = os.environ['gitlab_project']
    gitlab_mr_id = os.environ['gitlab_mr_id']
    gitlab_source_branch = os.environ['gitlab_source_branch']
    gitlab_target_branch = os.environ['gitlab_target_branch']
    develproject = os.environ['develproject']
    homeproject = os.environ['homeproject']
    repository = os.environ['repository']
    testproject = test_project_name(gitlab_project, gitlab_mr_id, homeproject)
    changes = [GitlabChange(gitlab_project, gitlab_mr_id,
                            gitlab_source_branch, gitlab_target_branch)]
    cleanup(testproject)
    testproject = create_test_project(develproject, testproject, repository)
    for change in changes:
        change.prep_workspace()
        create_test_package(change, develproject, testproject)
    cleanup(testproject)


if __name__ == '__main__':
    main()
