---
- name: Setup repositories on the deployer node
  hosts: ardana-virt
  remote_user: root
  gather_facts: False

  tasks:

  - name: Initialize repository variables
    set_fact:
      repos_dict: {}
      repository_list: []

  - name: Replace repository mnemonics
    set_fact:
      repository_list: "{{ repository_list+
        [repository_mnemonics[cloud_release][item]|default(item)] }}"
    with_items: "{{ repositories.split(',')|unique|list }}"
    when: repositories != ''

  - name: Parse repositories
    set_fact:
      repos_dict: "{{ repos_dict|default({})|combine({item: item}) }}"
    with_items: "{{ repository_list }}"
    when: repositories != ''

  - name: Add Cloud to repository list
    set_fact:
      # Use a consistent name for the Cloud media install repo so that we
      # don't have to account for development versus production repos in the
      # playbooks
      repos_dict: "{{ {'Cloud': cloud_repository}|combine(repos_dict) }}"

  - name: Check cloud srv directory
    stat:
      path: "{{ repository_path[cloud_release] }}/x86_64/repos/Cloud/"
    register: cloud_srv_dir_stats

  - name: Check srv directories
    stat:
      path: "{{ repository_path[cloud_release] }}/x86_64/repos/{{ item.key }}"
    register: srv_dir_stats
    with_dict: "{{ repos_dict }}"

  - name: Create srv directories
    file:
      state: directory
      path: "{{ repository_path[cloud_release] }}/x86_64/repos/{{ item.item.key }}"
      mode: 0755
    when: not item.stat.exists
    with_items:
      - "{{ srv_dir_stats.results }}"

  # NOTE: we rsync only once, to avoid bringing in new cloudsource media contents
  # during subsequent runs
  - name: Rsync Cloud repo contents
    command: >
      rsync
        --archive
        --sparse
        --hard-links
        --fuzzy
        --delay-updates
        --delete-delay
        'rsync://{{ clouddata_server }}/cloud/repos/x86_64/{{ cloud_repository }}/'
        '{{ repository_path[cloud_release] }}/x86_64/repos/Cloud/'
    when: not cloud_srv_dir_stats.stat.exists

  - name: Mount zypper repos
    mount:
      state: mounted
      fstype: nfs
      opts: ro,nosuid,rsize=8192,wsize=8192,hard,intr,nolock,x-systemd.automount,noauto
      name: "{{ repository_path[cloud_release] }}//x86_64/repos/{{ item.item.key }}"
      src: "{{ clouddata_server }}:/srv/nfs/repos/x86_64/{{ item.item.value }}"
    when: item.item.key != 'Cloud'
    with_items:
      - "{{ srv_dir_stats.results }}"

  - name: Add zypper repos
    zypper_repository:
      repo: "{{ repository_path[cloud_release] }}/x86_64/repos/{{ item.item.key }}"
      name: "{{ item.item.key }}"
    register: added_repos
    with_items:
      - "{{ srv_dir_stats.results }}"

  - name: Add test repo
    zypper_repository:
      repo: "{{ test_repository_url }}"
      name: "Cloud-Test"
    when: test_repository_url != ''

  # Refresh all repos
  - name: Refresh zypper repositories
    zypper_repository:
      repo: '*'
      auto_import_keys: yes
      runrefresh: yes

  - name: Install ardana pattern
    zypper:
      name: "patterns-cloud-ardana"
      state: present


  # This can't happen earlier because we rely on the ardana pattern for creating
  # the ardana user/group
  - name: Ensure /etc/ardana exists
    file:
      path: /etc/ardana
      state: directory
      owner: ardana
      group: ardana

  - name: Capture build number of cloudsource media
    get_url:
      url: "{{ cloudsource_url }}/media.1/build"
      dest: /etc/ardana/media-build-version

  - name: Add cloudsource information to /etc/motd
    shell: |
      media_build_version=$(cat /etc/ardana/media-build-version)
      echo "Built from: {{ cloudsource_url }}" >>/etc/motd
      echo "Media build version: $media_build_version" >>/etc/motd
