heat_template_version: 2016-10-14

description: >
  Template for deploying cloud {{ input_model.cloud.name }}.

parameters:
  key_name:
    type: string
    label: Key Name
    description: Name of key-pair to be used for compute instance
    default: engcloud-cloud-ci

resources:

  # networks and subnets
{% set virt_config = input_model.virtual %}

{% for network in heat_template.networks.values() %}

  {{ network['name'] }}_network:
    type: OS::Neutron::Net
    properties:
      port_security_enabled: False

  {{ network['name'] }}_subnet:
    type: OS::Neutron::Subnet
    properties:
      network_id: { get_resource: {{ network.name }}_network }
{%     if network['cidr'] is defined %}
      cidr: "{{ network['cidr'] }}"
      allocation_pools:
        - start: "{{ network['cidr'] | ipaddr('net') | ipaddr(2) }}"
          end: "{{ network['cidr'] | ipaddr('net') | ipaddr(-2) }}"
{%     endif %}
      ip_version: 4
{%     if network['gateway'] is defined %}
      gateway_ip: "{{ network['gateway'] }}"
{%     endif %}
      enable_dhcp: "{{ network['enable_dhcp'] }}"

{% endfor %}
  # router
  router_ext:
    type: OS::Neutron::Router
    properties:
      external_gateway_info:
        network: floating

  router_mgmt_interface:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: router_mgmt }
      subnet_id: { get_resource: subnet_{{ ns.mgmt_network_name }} }

  #router_external_api_interface:
  #  type: OS::Neutron::RouterInterface
  #  properties:
  #    router_id: { get_resource: router_mgmt }
  #    subnet_id: { get_resource: subnet_external_api }

  #router_external_vm_interface:
  #  type: OS::Neutron::RouterInterface
  #  properties:
  #    router_id: { get_resource: router_mgmt }
  #    subnet_id: { get_resource: subnet_external_vm }

  # floating IPs
  mgmt-floatingip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: floating



  # instances

{% for server in input_model.servers %}

# determine if server is in use


{%     set server_name = server.id|lower|replace('-','_') %}
{%     set image_id = virt_config.images[server.id]|default(virt_config.images[server['role']])|default(virt_config.images['default']) %}
{%     set image_id = image_id[server['distro-id']]|default(image_id) %}
{%     set flavor_id = virt_config.flavors[server.id]|default(virt_config.flavors[server['role']])|default(virt_config.flavors['default']) %}

{%     set ns = namespace(disk_model={}, interface_model={}, disks=[], port_names=[]) %}
{%     for server_role in input_model['server-roles'] if server_role.name == server.role %}
{%       for disk_model in input_model['disk-models'] if disk_model.name == server_role['disk-model'] %}
{%         set ns.disk_model = disk_model  %}
{%       endfor %}
{%       for interface_model in input_model['interface-models'] if interface_model.name == server_role['interface-model'] %}
{%         set ns.interface_model = interface_model  %}
{%       endfor %}
{%     endfor %}


{%     for interface in ns.interface_model['network-interfaces'] %}
{%       for network_group in (interface['network-groups']|default([]) + interface['forced-network-groups']|default([])) %}
{%         for network in input_model.networks if network_group == network['network-group'] %}
{%           set network_name = network.name|lower|replace('-','_')|regex_replace('-net$', '') %}
{%           for device in (interface['bond-data']|default({})).devices|default([interface.device.name]) %}

{%             set port_name = "%s_%s_%s"|format(server_name, network_name, device) %}
{%             set _ = ns.port_names.append(port_name) %}
  {{ port_name }}:
    type: OS::Neutron::Port
    properties:
      network: { get_resource: network_{{ network_name }} }
      fixed_ips:
        - subnet_id: { get_resource: subnet_{{ network_name }} }
{%             if network.cidr|default('') == mgmt_cidr and loop.index0 == 0 %}
        - ip_address: {{ server['ip-addr'] }}
{%             endif %}

{%           endfor %}
{%         endfor %}
{%       endfor %}
{%     endfor %}

{%     for volume_group in (ns.disk_model['volume-groups']|default([]) or []) %}
{%       set ns.disks = ns.disks+volume_group['physical-volumes']|default([]) %}
{%     endfor %}

{%     for device_group in (ns.disk_model['device-groups']|default([]) or []) %}
{%       set ns.disks = ns.disks+device_group.devices|default([]) %}
{%     endfor %}

{%     for disk in ns.disks|unique if disk != '/dev/sda_root' %}
{%       set volume_name = "%s_%s"|format(server_name, disk|replace('/dev/', '')) %}
  {{ volume_name }}:
    type: OS::Cinder::Volume
    properties:
      size: 30

  {{ server_name }}_vol_att_{{ disk|replace('/dev/', '') }}:
    type: OS::Cinder::VolumeAttachment
    properties:
      instance_uuid: { get_resource: {{ server_name }} }
      volume_id: { get_resource: {{ volume_name }} }
      mountpoint: {{ disk }}

{%     endfor %}

  {{ server_name }}:
    type: OS::Nova::Server
    properties:
      key_name: { get_param: key_name }
      image: {{ image_id }}
      flavor: {{ flavor_id }}
      networks:
{%     for port_name in ns.port_names %}
        - port: { get_resource: {{ port_name }} }
{%     endfor %}
{%   endif %}
{% endfor %}

  deployer-floating-assignment:
    type: OS::Neutron::FloatingIPAssociation
    properties:
      floatingip_id: { get_resource: deployer-floatingip }
      port_id: { get_resource: deployer_mgmt_port }

outputs:
  # deployer
  deployer-ip-floating:
    description: Floating IP address of the deployer node
    value: { get_attr: [deployer-floatingip, floating_ip_address] }

  deployer-net-mgmt-ip:
    description: IP address of the deployer in the mgmt network
    value: { get_attr: [deployer, networks, { get_resource: network_mgmt }, 0]}

  # controller
  controllers-net-mgmt-ips:
    description: List of IPs of the controllers in the mgmt network
    value: { list_join: ["\n", { get_attr: [controllers, networks, { get_resource: network_mgmt }, 0]} ]}

  # computes
  computes-net-mgmt-ips:
    description: List of IPs of the computes on the mgmt network
    value: { list_join: ["\n", { get_attr: [computes, networks, { get_resource: network_mgmt }, 0]} ]}

  # network info
  network-mgmt-id:
    description: Neutron Network ID of management network
    value: { get_resource: network_mgmt }
