heat_template_version: 2016-10-14

description: >
  Template for deploying scenario {{ scenario.name }}.

parameters:
  key_name:
    type: string
    label: Key Name
    description: Name of key-pair to be used for compute instance
    default: engcloud-cloud-ci


  image_id_controller:
    type: string
    label: Image ID
    description: Image to be used for compute instance (controller)
    default: cleanvm-jeos-SLE12SP3
  image_id_compute:
    type: string
    label: Image ID
    description: Image to be used for compute instance (compute node)
    default: cleanvm-jeos-SLE12SP3
  instance_type_controller:
    type: string
    label: Instance Type
    description: Type of instance (flavor) to be used for the controller
    default: cloud-ardana-job-controller
  instance_type_compute:
    type: string
    label: Instance Type
    description: Type of instance (flavor) to be used for compute nodes
    default: cloud-ardana-job-compute
  number_of_computes:
    type: number
    description: Count of compute nodes to create
    default: 2
  number_of_controllers:
    type: number
    description: Count of controller nodes to create
    default: 1

resources:

  # networks and subnets
{% for network in input_model.networks %}
{%   set network_name = network.name|lower|replace('-','_')|re_replace('-net$', '') %}
  network_{{ network_name }}:
    type: OS::Neutron::Net
    properties:
      port_security_enabled: False

  subnet_{{ network_name }}:
    type: OS::Neutron::Subnet
    properties:
      network_id: { get_resource: network_{{ network_name }} }
{%   if network.cidr|defined %}
      cidr: "{{ network.cidr }}"
      allocation_pools:
        - start: "{{ network.cidr | ipaddr('net') | ipaddr(1) }}"
          end: "{{ network.cidr | ipaddr('net') | ipaddr(-2) }}"
{%   else %}
      cidr: "{{ dummy_cidr }}"
      allocation_pools:
        - start: "{{ dummy_cidr | ipaddr('net') | ipaddr(1) }}"
          end: "{{ dummy_cidr | ipaddr('net') | ipaddr(-2) }}"
{%   endif %}
      ip_version: 4
{%   if network['gateway-ip']|defined %}
      gateway_ip: "{{ network['gateway-ip'] }}"
{%   endif %}
{%   if network.name not in dhcp_enabled_networks %}
      enable_dhcp: False
{%   endif %}

  # router
  router_mgmt:
    type: OS::Neutron::Router
    properties:
      external_gateway_info:
        network: floating

  router_mgmt_interface:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: router_mgmt }
      subnet_id: { get_resource: subnet_mgmt }

  router_external_api_interface:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: router_mgmt }
      subnet_id: { get_resource: subnet_external_api }

  router_external_vm_interface:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: router_mgmt }
      subnet_id: { get_resource: subnet_external_vm }

  # floating IPs
  deployer-floatingip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: floating

  deployer_mgmt_port:
    type: OS::Neutron::Port
    properties:
      network: { get_resource: network_mgmt }
      fixed_ips:
        - subnet_id: { get_resource: subnet_mgmt }

  # instances
  deployer:
    type: OS::Nova::Server
    properties:
      key_name: { get_param: key_name }
      image: { get_param: image_id_controller }
      flavor: { get_param: instance_type_compute }
      networks:
        - port: { get_resource: deployer_mgmt_port }
        - subnet: { get_resource: subnet_ardana }
        - subnet: { get_resource: subnet_mgmt2 }
        - subnet: { get_resource: subnet_external_vm }
        - subnet: { get_resource: subnet_guest }
        - subnet: { get_resource: subnet_iscsi }
        - subnet: { get_resource: subnet_tenant }
        - subnet: { get_resource: subnet_external_api }

  controllers:
    type: OS::Heat::ResourceGroup
    properties:
      count: { get_param: number_of_controllers }
      resource_def:
        type: heat-ardana-std-controller.yaml
        properties:
          key_name: { get_param: key_name }
          index: "%index%"
          image_id_controller: { get_param: image_id_controller }
          instance_type_controller: { get_param: instance_type_controller }
          networks:
            - subnet: { get_resource: subnet_mgmt }
            - subnet: { get_resource: subnet_ardana }
            - subnet: { get_resource: subnet_mgmt2 }
            - subnet: { get_resource: subnet_external_vm }
            - subnet: { get_resource: subnet_guest }
            - subnet: { get_resource: subnet_iscsi }
            - subnet: { get_resource: subnet_tenant }
            - subnet: { get_resource: subnet_external_api }
  computes:
    type: OS::Heat::ResourceGroup
    properties:
      count: { get_param: number_of_computes }
      resource_def:
        type: OS::Nova::Server
        properties:
          name: compute%index%
          key_name: { get_param: key_name }
          image: { get_param: image_id_compute }
          flavor: { get_param: instance_type_compute }
          networks:
            - subnet: { get_resource: subnet_mgmt }
            - subnet: { get_resource: subnet_ardana }
            - subnet: { get_resource: subnet_mgmt2 }
            - subnet: { get_resource: subnet_external_vm }
            - subnet: { get_resource: subnet_guest }
            - subnet: { get_resource: subnet_iscsi }
            - subnet: { get_resource: subnet_tenant }
            - subnet: { get_resource: subnet_external_api }

  deployer-floating-assignment:
    type: OS::Neutron::FloatingIPAssociation
    properties:
      floatingip_id: { get_resource: deployer-floatingip }
      port_id: { get_resource: deployer_mgmt_port }

outputs:
  # deployer
  deployer-ip-floating:
    description: Floating IP address of the deployer node
    value: { get_attr: [deployer-floatingip, floating_ip_address] }

  deployer-net-mgmt-ip:
    description: IP address of the deployer in the mgmt network
    value: { get_attr: [deployer, networks, { get_resource: network_mgmt }, 0]}

  # controller
  controllers-net-mgmt-ips:
    description: List of IPs of the controllers in the mgmt network
    value: { list_join: ["\n", { get_attr: [controllers, networks, { get_resource: network_mgmt }, 0]} ]}

  # computes
  computes-net-mgmt-ips:
    description: List of IPs of the computes on the mgmt network
    value: { list_join: ["\n", { get_attr: [computes, networks, { get_resource: network_mgmt }, 0]} ]}

  # network info
  network-mgmt-id:
    description: Neutron Network ID of management network
    value: { get_resource: network_mgmt }
