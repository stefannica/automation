heat_template_version: 2016-10-14

description: >
  Template for deploying scenario {{ scenario.name }}.

parameters:
  key_name:
    type: string
    label: Key Name
    description: Name of key-pair to be used for compute instance
    default: engcloud-cloud-ci


  image_id_controller:
    type: string
    label: Image ID
    description: Image to be used for compute instance (controller)
    default: cleanvm-jeos-SLE12SP3
  image_id_compute:
    type: string
    label: Image ID
    description: Image to be used for compute instance (compute node)
    default: cleanvm-jeos-SLE12SP3
  instance_type_controller:
    type: string
    label: Instance Type
    description: Type of instance (flavor) to be used for the controller
    default: cloud-ardana-job-controller
  instance_type_compute:
    type: string
    label: Instance Type
    description: Type of instance (flavor) to be used for compute nodes
    default: cloud-ardana-job-compute
  number_of_computes:
    type: number
    description: Count of compute nodes to create
    default: 2
  number_of_controllers:
    type: number
    description: Count of controller nodes to create
    default: 1

resources:

  # networks and subnets
{% set ns = namespace(mgmt_network_name=null, extapi_network_name=null, extvm_network_name=null) %}
{% set mgmt_cidr = '%s/%s'.format(input_model['bare-metal'].subnet, input_model['bare-metal'].netmask) | ipaddr('net') %}

{% for network in input_model.networks %}
{%   set network_name = network.name|lower|replace('-','_')|re_replace('-net$', '') %}
{%   set cidr = network.cidr|default(dummy_cidr) %}
{%   set ns.mgmt_network_name = network_name if cidr == mgmt_cidr }}

  network_{{ network_name }}:
    type: OS::Neutron::Net
    properties:
      port_security_enabled: False

  subnet_{{ network_name }}:
    type: OS::Neutron::Subnet
    properties:
      network_id: { get_resource: network_{{ network_name }} }
      cidr: "{{ cidr }}"
      allocation_pools:
        - start: "{{ cidr | ipaddr('net') | ipaddr(2) }}"
          end: "{{ cidr | ipaddr('net') | ipaddr(-2) }}"
      ip_version: 4
{%   if network['gateway-ip']|defined %}
      gateway_ip: "{{ network['gateway-ip'] }}"
{%   endif %}
{%   if cidr != mgmt_cidr %}
      enable_dhcp: False
{%   endif %}
{% endfor }
  # router
  router_ext:
    type: OS::Neutron::Router
    properties:
      external_gateway_info:
        network: floating

  router_mgmt_interface:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: router_mgmt }
      subnet_id: { get_resource: subnet_{{ ns.mgmt_network_name }} }

  #router_external_api_interface:
  #  type: OS::Neutron::RouterInterface
  #  properties:
  #    router_id: { get_resource: router_mgmt }
  #    subnet_id: { get_resource: subnet_external_api }

  #router_external_vm_interface:
  #  type: OS::Neutron::RouterInterface
  #  properties:
  #    router_id: { get_resource: router_mgmt }
  #    subnet_id: { get_resource: subnet_external_vm }

  # floating IPs
  mgmt-floatingip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: floating



  # instances

{% for server in input_model.servers %}
{%   set server_name = server.name|lower|replace('-','_') %}
{%   set image_id = virt_metadata.images[server.name]|default(virt_metadata.images[server['role']])|default(virt_metadata.images['default']) %}
{%   set image_id = image_id[server['distro-id']]|default(image_id) %}
{%   set flavor_id = virt_metadata.flavors[server.name]|default(virt_metadata.flavors[server['role']])|default(virt_metadata.images['default']) %}

{%   set ns = namespace(disk_model=null, interface_model=null, disks=[]) %}
{%   for server_role in input_model['server-roles'] if server_role.name == server['server-role'] %}
{%     for disk_model in input_model['disk-models'] if disk_model.name == server_role['disk-model'] %}
{%       set ns.disk_model = disk_model  %}
{%     endfor }
{%     for interface_model in input_model['interface-models'] if interface_model.name == server_role['interface-model'] %}
{%       set ns.interface_model = interface_model  %}
{%     endfor }
{%   endfor }


{%   for interface interface_model['network-interfaces'] %}

  deployer_mgmt_port:
    type: OS::Neutron::Port
    properties:
      network: { get_resource: network_mgmt }
      fixed_ips:
        - subnet_id: { get_resource: subnet_mgmt }

{%   endfor %}

{%   for volume_group in disk_model['volume-groups']|default([]) %}
{%     ns.disks = ns.disks+volume_group['physical-volumes']|default([]) %}
{%   endfor %}

{%   for device_group in disk_model['device-groups']|default([]) %}
{%     ns.disks = ns.disks+device_group.devices|default([]) %}
{%   endfor %}

{%   for disk in ns.disks|unique if disk != '/dev/sda_root' %}

  controller_vdb:
    type: OS::Cinder::Volume
    properties:
      size: 30

  controller_vol_att_vdb:
    type: OS::Cinder::VolumeAttachment
    properties:
      instance_uuid: { get_resource: {{ server_name }} }
      volume_id: { get_resource: controller_vdb }
      mountpoint: {{ disk }}

{%   endfor }

  {{ server_name }}:
    type: OS::Nova::Server
    properties:
      key_name: { get_param: key_name }
      image: {{ image_id }}
      flavor: {{ flavor_id }}
      networks:
        - port: { get_resource: deployer_mgmt_port }
        - subnet: { get_resource: subnet_ardana }
        - subnet: { get_resource: subnet_mgmt2 }
        - subnet: { get_resource: subnet_external_vm }
        - subnet: { get_resource: subnet_guest }
        - subnet: { get_resource: subnet_iscsi }
        - subnet: { get_resource: subnet_tenant }
        - subnet: { get_resource: subnet_external_api }

{% endfor }

  deployer-floating-assignment:
    type: OS::Neutron::FloatingIPAssociation
    properties:
      floatingip_id: { get_resource: deployer-floatingip }
      port_id: { get_resource: deployer_mgmt_port }

outputs:
  # deployer
  deployer-ip-floating:
    description: Floating IP address of the deployer node
    value: { get_attr: [deployer-floatingip, floating_ip_address] }

  deployer-net-mgmt-ip:
    description: IP address of the deployer in the mgmt network
    value: { get_attr: [deployer, networks, { get_resource: network_mgmt }, 0]}

  # controller
  controllers-net-mgmt-ips:
    description: List of IPs of the controllers in the mgmt network
    value: { list_join: ["\n", { get_attr: [controllers, networks, { get_resource: network_mgmt }, 0]} ]}

  # computes
  computes-net-mgmt-ips:
    description: List of IPs of the computes on the mgmt network
    value: { list_join: ["\n", { get_attr: [computes, networks, { get_resource: network_mgmt }, 0]} ]}

  # network info
  network-mgmt-id:
    description: Neutron Network ID of management network
    value: { get_resource: network_mgmt }
