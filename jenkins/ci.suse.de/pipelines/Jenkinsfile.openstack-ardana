/**
 * The openstack-ardana Jenkins Pipeline
 */

//
//def executeIn(String environment, String command) {
//  sh "source ${environment}/bin/activate && " + command
//}

//def ansiblePlaybook(String environment, String args) {
//  dir('automation-git/scripts/jenkins/ardana/ansible') {
//    executeIn '/opt/ansible', args
//  }
//}

pipeline {
  // skip the default checkout, because we want to use a custom path
  options {
    skipDefaultCheckout()
    // lock(label: 'ECP-SLOT', quantity: 1)
  }

  agent {
    node {
      label 'cloud-ardana-ci'
      customWorkspace "openstack-ardana-pipeline-${env.BUILD_ID}"
    }
  }

  stages {
    stage('clone automation repo') {
      steps {
        dir('automation-git') {
          checkout scm
        }
      }
    }

    // TODO: more stages here (linter, etc)
    stage('parallel stage') {
      // abort all stages if one of them fails
      failFast true
      parallel {

        // TODO: more stages here (linter, etc)

        stage('build test packages') {
          when {
            expression { gerrit_change_ids != '' }
          }
          steps {
            build job: 'cloud-ardana-testbuild-gerrit', parameters: [
              string(name: 'gerrit_change_ids', value: "$gerrit_change_ids"),
              string(name: 'develproject', value: "$develproject"),
              string(name: 'homeproject', value: "$homeproject"),
              string(name: 'repository', value: "$repository"),
              string(name: 'git_automation_repo', value: "$git_automation_repo"),
              string(name: 'git_automation_branch', value: "$git_automation_branch")
            ], propagate: true, wait: true
          }
        }

        stage('prepare virtual environment') {
          stages {

            stage('clone input model repo') {
              when {
                  expression { git_input_model_repo != '' && scenario == '' }
              }
              steps {
                script {
                  env.input_model_path = "${WORKSPACE}/input-model"
                }
                dir('input-model-git') {
                  git(
                     url: "$git_input_model_repo",
                     branch: "$git_input_model_branch"
                  )
                  sh 'ln -s $WORKSPACE/input-model-git/$git_input_model_path/$model $input_model_path'
                }
              }
            }

            stage('generate input model') {
              when {
                  expression { scenario != '' }
              }
              steps {
                script {
                  env.input_model_path = "${WORKSPACE}/input-model"
                }
                dir('automation-git/scripts/jenkins/ardana/ansible') {
                  sh '''
                    source /opt/ansible/bin/activate
                    ansible-playbook -v generate-input-model.yml \
                            -e scenario_name=${scenario} \
                            -e input_model_dir=$input_model_path
                  '''
                }
              }
            }

            stage('generate heat') {
              steps {
                script {
                  env.heat_template_file = "${WORKSPACE}/heat-ardana-${model}.yaml"
                }
                dir('automation-git/scripts/jenkins/ardana/ansible') {
                  sh '''
                    source /opt/ansible/bin/activate
                    ansible-playbook -v generate-heat.yml \
                      -e input_model_path=$input_model_path \
                      -e heat_template_file=$heat_template_file
                    '''
                }
              }
            }

            stage('create virtual env') {
              //options {
              //  lock(resource: 'ECP-API')
              //}
              steps {
                script {
                  def heat_stack_name = "cloud-ci-openstack-ardana-${BUILD_NUMBER}"
                  if ("${job_name}" != '') {
                      heat_stack_name = heat_stack_name+"-${job_name}"
                  }
                  env.heat_stack_name = heat_stack_name
                }
                build job: 'openstack-ardana-heat', parameters: [
                  string(name: 'action', value: "create"),
                  string(name: 'build_pool_name', value: "$build_pool_name"),
                  string(name: 'build_pool_size', value: "$build_pool_size"),
                  string(name: 'heat_stack_name', value: "$heat_stack_name"),
                  string(name: 'heat_template_file', value: "$heat_template_file")
                ], propagate: true, wait: true
              }
            }

            stage('setup ansible vars') {
              steps {
                dir('automation-git/scripts/jenkins/ardana/ansible') {
                  sh './bin/setup_virt_vars.sh'
                  script {
                    env.DEPLOYER_IP = sh (returnStdout: true, script: 'cat deployer_ip')
                  }
                }
              }
            }

            stage('cleanup virtual env') {
              //options {
              //  lock(resource: 'ECP-API')
              //}
              steps {
                build job: 'openstack-ardana-heat', parameters: [
                  string(name: 'action', value: "cleanup"),
                  string(name: 'build_pool_name', value: "$build_pool_name"),
                  string(name: 'build_pool_size', value: "$build_pool_size")
                ], propagate: false, wait: false
              }
            }

          } // stages
        } // stage('prepare virtual environment')
      } // parallel
    } // stage('parallel stage')

    stage('bootstrap CLM') {
      steps {
        dir('automation-git/scripts/jenkins/ardana/ansible') {
          sh './bin/bootstrap_clm.sh'
          script {
            env.verification_temp_dir = sh (returnStdout: true, script: 'cat verification_temp_dir')
          }
        }
      }
    }

    stage('deploy Ardana') {
      steps {
        dir('automation-git/scripts/jenkins/ardana/ansible') {
          sh '''
            # Run site.yml outside ansible for output streaming
            ssh $sshargs ardana@$DEPLOYER_IP "cd ~/scratch/ansible/next/ardana/ansible ; \
                 ansible-playbook -v -i hosts/verb_hosts site.yml"
          '''
        }
      }
    }

    stage ('run Tempest') {
      steps {
        dir('automation-git/scripts/jenkins/ardana/ansible') {
          sh '''
            image_mirror_url=http://provo-clouddata.cloud.suse.de/images/openstack/x86_64
            source /opt/ansible/bin/activate
            # Run post-deploy checks
            ansible-playbook -v -i hosts \
                -e "image_mirror_url=${image_mirror_url}" \
                -e "tempest_run_filter=${tempest_run_filter}" \
                -e "verification_temp_dir=$verification_temp_dir" \
                post-deploy-checks.yml
          '''
        }
      }
    }
  }

  post {
    always {
        build job: 'openstack-ardana-heat', parameters: [
          string(name: 'action', value: "cleanup"),
          string(name: 'build_pool_name', value: "$build_pool_name"),
          string(name: 'build_pool_size', value: "$build_pool_size"),
          string(name: 'heat_stack_name', value: "$heat_stack_name"),
          string(name: 'heat_template_file', value: "$heat_template_file")
        ], propagate: false, wait: false
        build job: 'openstack-ardana-heat', parameters: [
          string(name: 'action', value: "cleanup"),
          string(name: 'build_pool_name', value: "$build_pool_name"),
          string(name: 'build_pool_size', value: "$build_pool_size")
        ], propagate: false, wait: false
    }
  }

}