- job:
    name: openstack-ardana-heat
    description: |
      Ardana heat stack management (create/delete/suspend stacks, clean up old stacks)
    concurrent: false
    # the selected node needs the cloud credentials
    node: cloud-ardana-ci
    wrappers:
      - timestamps

      - timeout:
          timeout: 30
          type: no-activity
          abort: true
          write-description: "Job aborted due to 30 minutes of inactivity"

    logrotate:
      numToKeep: 200
      daysToKeep: 30

    parameters:
      - choice:
          name: action
          choices:
            - cleanup
            - create
            - delete
            - exclude
          description: >-
            The action to be performed:
              - cleanup: run the build pool cleanup logic on a heat stack or on
              the build pool itself
              - create: create a new heat stack
              - delete: delete a heat stack
              - exclude: take a heat stack out of the build pool management and
              prevent it from being deleted or suspended by the cleanup process

            The heat_stack_name parameter value must be supplied if the create,
            delete, or exclude action is selected. If the create or exclude
            action is selected, the heat_template_file parameter value must also
            be supplied.

      - string:
          name: heat_template_file
          default: ''
          description: >-
            The heat orchestration template file describing the stack that must
            be instantiated.

      - string:
          name: heat_stack_name
          default: ''
          description: >-
            The name of the heat stack to be created, deleted, suspended,
            reserved or released.

      - string:
          name: build_pool_name
          default: ''
          description: >-
            Name of the build resource pool to be used for this job. When
            supplied, the heat stack created by this job will be added to the
            build pool and will be cleaned up automatically when the pool fills up.

      - string:
          name: build_pool_size
          default: '0'
          description: >-
            The maximum number of heat stacks in the build_pool_name build pool
            that can be kept running at any given time. When this number is exceeded,
            older stacks in the pool will be deleted to make place for new ones.

    builders:
      - shell: |
          sleep 60
#          # the name for the cloud defined in ~./config/openstack/clouds.yaml
#          CLOUD_CONFIG_NAME=engcloud-cloud-ci
#
#          delete_heat_stack() {
#              stack_name=$1
#              delete_rc=0
#
#              # Resume stack before deletion, otherwise deleting it results in failure
#              openstack --os-cloud $CLOUD_CONFIG_NAME stack resume --wait $stack_name || :
#              openstack --os-cloud $CLOUD_CONFIG_NAME stack delete --wait $stack_name && rc=$? || rc=$?
#              if [[ $rc != 0 ]]; then
#                  # Attempt a brute force type of cleanup (delete servers and volumes)
#                  openstack --os-cloud $CLOUD_CONFIG_NAME stack resource list --filter type=OS::Nova::Server \
#                    -f value -c physical_resource_id $stack_name |
#                    awk '{print "openstack --os-cloud '$CLOUD_CONFIG_NAME' server delete --wait "$1 }' | sh -x || :
#                  openstack --os-cloud $CLOUD_CONFIG_NAME stack resource list --filter type=OS::Cinder::Volume \
#                    -f value -c physical_resource_id $stack_name |
#                    awk '{print "openstack --os-cloud '$CLOUD_CONFIG_NAME' volume delete "$1 }' | sh -x || :
#                  openstack --os-cloud $CLOUD_CONFIG_NAME stack delete --wait $stack_name && rc=$? || rc=$?
#                  if [[ $rc != 0 ]]; then
#                      # Usually, retrying after a short break works
#                      sleep 20
#                      openstack --os-cloud $CLOUD_CONFIG_NAME stack delete --wait $stack_name && rc=$? || rc=$?
#                      delete_rc=$rc
#                  fi
#              fi
#
#              return $delete_rc
#          }
#
#          get_heat_stacks() {
#              filter=$1
#              # NOTE: cannot use --property status=<status> as a filter when --tags is also present
#              openstack --os-cloud $CLOUD_CONFIG_NAME stack list \
#                        --tags "$build_pool_name" \
#                         -f value -c 'Stack Name' -c 'Stack Status' \
#                        --sort 'creation_time:desc' |
#                        grep "$filter" || :
#          }
#
#          cleanup_heat_stacks() {
#              keep_no_old_stacks=$1
#              cleanup_rc=0
#
#              old_stacks_to_delete=$(get_heat_stacks SUSPEND_COMPLETE | cut -d' ' -f1 |
#                                     awk 'NR > '$keep_no_old_stacks' {print $1}')
#              if [[ -n $old_stacks_to_delete ]]; then
#                  for old_stack in $old_stacks_to_delete
#                  do
#                      delete_heat_stack $old_stack && rc=$? || rc=$?
#                      if [[ $rc != 0 ]]; then
#                          cleanup_rc=$rc
#                      fi
#                  done
#              fi
#
#              failed_stacks_to_delete=$(get_heat_stacks _FAILED | cut -d' ' -f1)
#              if [[ -n failed_stacks_to_delete ]]; then
#                  for failed_stack in $failed_stacks_to_delete
#                  do
#                      delete_heat_stack $failed_stack || :
#                  done
#              fi
#
#              return $cleanup_rc
#          }
#
#          if [[ $action == "cleanup" ]]; then
#              if [[ -n $build_pool_name ]]; then
#                  # If a heat stack is supplied, clean it up by suspending it or deleting it,
#                  # depending on the build pool size
#                  if [[ -n $heat_stack_name ]]; then
#                      # First, check if the stack is hasn't been taken out of the build pool
#                      if [[ -n $(get_heat_stacks $heat_stack_name) ]]; then
#                          if (( $build_pool_size > 0 )); then
#                              exit_rc=0
#                              openstack --os-cloud $CLOUD_CONFIG_NAME stack suspend --wait $heat_stack_name && rc=$? || rc=$?
#                              # If the suspend operation failed, try to delete the heat stack
#                              if [[ $rc != 0 ]]; then
#                                  exit_rc=$rc
#                                  delete_heat_stack $heat_stack_name
#                              fi
#                              exit $exit_rc
#                          else
#                              delete_heat_stack $heat_stack_name
#                          fi
#                      fi
#                  else
#                      # Cleanup excess stacks and failed stacks
#                      cleanup_heat_stacks $build_pool_size
#                  fi
#              fi
#          elif [[ $action == "create" ]]; then
#              exit_rc=0
#              openstack --os-cloud $CLOUD_CONFIG_NAME stack create --timeout 10 --wait \
#                  -t "$heat_template_file"  \
#                  --tags "$build_pool_name" \
#                  $heat_stack_name && rc=$? || rc=$?
#              if [[ $rc != 0 ]]; then
#                  exit_rc=$rc
#                  delete_heat_stack $heat_stack_name || :
#                  exit $exit_rc
#              fi
#          elif [[ $action == "delete" ]]; then
#              delete_heat_stack $heat_stack_name
#          elif [[ $action == "exclude" ]]; then
#              # First, check if the stack is suspended
#              heat_stack=$(get_heat_stacks $heat_stack_name)
#              if [[ $heat_stack == *"SUSPEND_COMPLETE"* ]]; then
#                  # Updating a stack when it is suspended is not supported; it must be resumed first
#                  openstack --os-cloud $CLOUD_CONFIG_NAME stack resume --wait $heat_stack_name || :
#              fi
#              openstack --os-cloud $CLOUD_CONFIG_NAME stack update --tags '' \
#                  -t "$heat_template_file" $heat_stack_name
#          fi

    publishers:
      - workspace-cleanup:
          clean-if:
            - failure: false
            - aborted: false
            - unstable: false
